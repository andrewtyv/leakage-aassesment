/*#define NET_NUM_LAYERS 5
#define NET_NUM_NEURONS ((int[]){7,16,16,8,3})

struct {
    float lay0_weights[7][1];
    float lay1_weights[16][7];
    float lay2_weights[16][16];
    float lay3_weights[8][16];
    float lay4_weights[3][8];
} net_config_weights;

void *net_config_layer_weights[NET_NUM_LAYERS];

void init_weights() {
    float lay1_weights[16][7] = {
        { -0.247280f, -0.091947f, 0.321981f, 0.048494f, 0.230058f, 0.144276f, -0.159116f },
        { 0.135488f, -0.079149f, -0.080597f, 0.024292f, -0.381483f, 0.298042f, -0.167772f },
        { 0.250067f, 0.034080f, 0.383008f, -0.164992f, -0.077949f, 0.084442f, -0.551868f },
        { 0.206980f, 0.385408f, 0.281702f, 0.188692f, -0.036494f, 0.320476f, 0.268508f },
        { 0.098155f, 0.001279f, -0.090442f, -0.307558f, 0.306557f, -0.543011f, -0.092537f },
        { 0.041095f, 0.214970f, 0.440415f, 0.248331f, -0.072880f, 0.182032f, -0.315400f },
        { 0.357485f, -0.039119f, -0.168440f, -0.159765f, -0.015340f, -0.098196f, 0.572477f },
        { -0.179545f, 0.008152f, 0.007012f, 0.007068f, 0.013836f, -0.120391f, -0.145852f },
        { -0.215540f, -0.372044f, 0.054077f, 0.246094f, -0.135771f, -0.139654f, -0.079121f },
        { -0.115160f, -0.359067f, 0.341277f, 0.109750f, -0.177924f, 0.074293f, -0.109614f },
        { -0.052909f, 0.090991f, 0.238241f, 0.379881f, 0.425977f, -0.062215f, -0.124937f },
        { 0.024899f, 0.032086f, -0.183555f, -0.155119f, 0.203318f, 0.410450f, -0.056625f },
        { -0.161991f, -0.070843f, -0.248783f, -0.068218f, 0.105611f, -0.020336f, 0.308644f },
        { 0.037722f, 0.120280f, -0.037189f, 0.328916f, -0.305586f, -0.075898f, -0.293422f },
        { 0.206568f, 0.212581f, -0.128942f, 0.414528f, -0.074316f, -0.345844f, -0.070301f },
        { 0.090005f, -0.058598f, 0.566380f, 0.213847f, 0.432820f, 0.346471f, -0.421446f }
    };

    float lay2_weights[16][16] = {
        { -0.094440f, -0.682121f, -0.161599f, 0.278776f, -0.210803f, -0.159172f, 0.081534f, 0.196829f, -0.089078f, -0.063953f, 0.202245f, 0.063515f, -0.071322f, 0.078626f, 0.019030f, 0.063658f },
        { 0.500308f, -0.076302f, -0.134941f, 0.353408f, -0.176425f, 0.429972f, -0.048549f, 0.018460f, 0.183407f, 0.303277f, 0.249250f, -0.050909f, -0.091607f, 0.086868f, 0.033680f, -0.160568f },
        { 0.102682f, 0.248530f, 0.041627f, 0.391000f, 0.102576f, -0.038953f, 0.025054f, -0.140027f, -0.257824f, 0.119132f, -0.213313f, -0.089573f, -0.022300f, 0.096276f, 0.115290f, 0.013556f },
        { -0.482827f, -0.051648f, -0.193885f, -0.027837f, 0.247832f, 0.201206f, 0.055083f, 0.126440f, -0.372102f, 0.048717f, 0.156128f, -0.176532f, 0.101247f, -0.095207f, 0.250127f, 0.277105f },
        { -0.133696f, 0.365731f, -0.047520f, 0.515486f, -0.122889f, 0.015939f, 0.053297f, -0.187699f, -0.431345f, -0.199901f, 0.269901f, -0.082167f, -0.081677f, 0.379200f, 0.123384f, 0.175577f },
        { 0.212362f, -0.226854f, 0.031182f, 0.037554f, -0.039717f, -0.273258f, 0.115945f, -0.414616f, -0.234267f, -0.202335f, -0.103033f, 0.210273f, 0.414170f, 0.430574f, 0.201565f, 0.109923f },
        { -0.584137f, 0.282530f, 0.657237f, 0.113219f, 0.058510f, 0.174674f, 0.182157f, 0.033729f, -0.093454f, 0.090440f, -0.342947f, -0.470607f, 0.340235f, -0.114515f, 0.178989f, 0.388648f },
        { 0.305070f, -0.138348f, 0.081189f, -0.291522f, -0.026143f, 0.261504f, 0.008007f, -0.712842f, -0.562816f, -0.200396f, 0.333310f, 0.049771f, 0.035318f, -0.328992f, 0.036608f, -0.568793f },
        { 0.085458f, 0.294810f, -0.204397f, 0.271099f, -0.179974f, 0.036844f, -0.033984f, 0.023467f, 0.381738f, 0.220304f, -0.169430f, -0.691241f, 0.223701f, 0.190977f, 0.041378f, -0.139548f },
        { 0.399602f, -0.446803f, -0.196095f, -0.366586f, 0.092827f, -0.116636f, 0.527798f, 0.004452f, -0.059702f, 0.143175f, -0.183049f, -0.270977f, 0.133751f, -0.122255f, 0.243994f, 0.083695f },
        { 0.029105f, 0.017113f, -0.021578f, 0.101882f, -0.099306f, -0.489426f, 0.019450f, -0.115149f, -0.344230f, 0.195171f, -0.095061f, -0.436309f, -0.018691f, -0.168691f, -0.425387f, 0.078047f },
        { -0.262640f, 0.179593f, -0.224372f, 0.244262f, 0.106356f, 0.027152f, -0.188959f, 0.226203f, 0.125889f, -0.090600f, 0.145159f, -0.256396f, -0.319941f, -0.023892f, 0.017779f, 0.106977f },
        { 0.016262f, 0.310178f, -0.322626f, 0.142082f, 0.056411f, 0.339053f, 0.031229f, 0.079076f, 0.440321f, 0.199073f, 0.152139f, -0.097533f, 0.034738f, -0.413103f, -0.210931f, 0.161748f },
        { -0.444792f, 0.023223f, 0.004459f, 0.097275f, -0.424074f, -0.507715f, 0.277391f, 0.027680f, 0.102541f, 0.404158f, 0.043460f, -0.491037f, -0.078022f, 0.204594f, -0.106353f, -0.075718f },
        { -0.150389f, 0.366969f, 0.310826f, -0.452451f, 0.476072f, -0.193521f, 0.506910f, -0.328484f, 0.275404f, -0.141607f, -0.038930f, 0.220844f, -0.184914f, 0.078828f, 0.076866f, 0.297817f },
        { 0.341664f, 0.469754f, 0.075968f, 0.102180f, -0.142148f, -0.191720f, -0.330292f, -0.056571f, 0.039101f, 0.005054f, 0.143331f, -0.339049f, 0.433151f, 0.076777f, 0.273301f, 0.086312f }
    };

    float lay3_weights[8][16] = {
        { -0.219129f, -0.081466f, -0.824570f, 0.053463f, -0.017327f, 0.303254f, -0.438990f, -0.019646f, -0.076352f, -0.315797f, -0.367040f, -0.293877f, 0.245972f, 0.246324f, -0.359987f, -0.041683f },
        { 0.118347f, 0.081415f, -0.379619f, -0.150419f, -0.358934f, 0.254103f, 0.648826f, -0.012468f, -0.536421f, 0.204641f, 0.389209f, 0.369668f, 0.041160f, 0.132454f, 0.023713f, 0.180139f },
        { 0.235354f, -0.188394f, -0.146627f, -0.085417f, -0.057575f, 0.047933f, 0.279665f, -0.326643f, 0.229627f, -0.049253f, -0.716530f, -0.099677f, -0.068222f, 0.137053f, 0.147390f, -0.001591f },
        { -0.203611f, 0.238192f, -0.169283f, -0.297112f, -0.160373f, -0.134651f, -0.028528f, -0.111988f, -0.091093f, 0.185406f, 0.199125f, 0.133213f, -0.077361f, -0.166814f, -0.057943f, -0.036674f },
        { 0.210362f, -0.070054f, -0.301181f, -0.209319f, 0.441046f, -0.233165f, -0.315949f, -0.072917f, 0.440266f, 0.024110f, 0.073162f, -0.394141f, -0.374707f, -0.000593f, -0.114403f, 0.097415f },
        { -0.275619f, 0.263262f, 0.339368f, -0.386726f, 0.061284f, -0.069806f, 0.360652f, 0.056457f, 0.238313f, -0.019068f, 0.078547f, 0.533207f, 0.519090f, -0.424109f, 0.095311f, 0.060322f },
        { -0.268446f, -0.192002f, 0.046235f, 0.239001f, 0.130778f, -0.104684f, -0.265291f, -0.523323f, 0.385003f, -0.139186f, -0.214858f, 0.084407f, -0.021474f, -0.004165f, 0.164292f, -0.121554f },
        { -0.264423f, -0.035635f, 0.016396f, -0.272108f, -0.276283f, -0.261846f, 0.203955f, 0.346103f, 0.318370f, -0.228281f, -0.173425f, -0.319304f, 0.459162f, -0.121057f, -0.009387f, -0.118983f }
    };

    float lay4_weights[3][8] = {
        { 0.041872f, -0.262155f, -0.155094f, -0.228028f, -0.591288f, 0.063617f, 0.184503f, 0.242494f },
        { 0.389765f, 0.237434f, -0.018065f, 0.135743f, -0.132782f, 0.198165f, -0.071825f, -0.581266f },
        { -0.007887f, 0.015302f, -0.293775f, 0.118543f, 0.296748f, -0.289025f, 0.188990f, 0.216846f }
    };



for (int i = 0; i < 16; i++) {
    for (int j = 0; j < 7; j++) {
        net_config_weights.lay1_weights[i][j] = lay1_weights[i][j];
    }
}

for (int i = 0; i < 16; i++) {
    for (int j = 0; j < 16; j++) {
        net_config_weights.lay2_weights[i][j] = lay2_weights[i][j];
    }
}

for (int i = 0; i < 8; i++) {
    for (int j = 0; j < 16; j++) {
        net_config_weights.lay3_weights[i][j] = lay3_weights[i][j];
    }
}

for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 8; j++) {
        net_config_weights.lay4_weights[i][j] = lay4_weights[i][j];
    }
}

net_config_layer_weights[0] = (void*)net_config_weights.lay1_weights;
net_config_layer_weights[1] = (void*)net_config_weights.lay2_weights;
net_config_layer_weights[2] = (void*)net_config_weights.lay3_weights;
net_config_layer_weights[3] = (void*)net_config_weights.lay4_weights;
}
*/

#define NET_NUM_LAYERS 4
#define NET_NUM_NEURONS ((int[]){7,5,4,3})

struct {
    float lay0_weights[7][1];
    float lay1_weights[5][7];
    float lay2_weights[4][5];
    float lay3_weights[3][4];
} net_config_weights;

void *net_config_layer_weights[NET_NUM_LAYERS];

void init_weights() {
    float lay1_weights[5][7] = 
    {
        {1.43, -0.49, 0.99, -0.21, 0.12, 0.02, -0.06},
        {-0.31, 1.66, -1.09, 0.92, 1.45, -0.67, 1.02},
        {0.75, -0.89, 1.03, -1.45, 1.12, -0.58, 1.72},
        {-1.91, 1.25, 0.46, 1.88, -0.43, -1.14, 0.99},
        {1.39, -0.57, -1.66, 0.31, 0.98, 1.01, -0.76}
    };
    float lay2_weights[4][5] =
    {
        {-1.47, 0.56, 1.85, -0.91, 0.23},
        {1.17, -1.38, 0.97, 0.63, -0.14},
        {-0.88, 1.09, -1.72, 0.21, 1.57},
        {1.86, -1.06, 0.45, -0.75, 1.02}
    };
    float lay3_weights[3][4] =
    {
        {0.45, -1.89, 1.68, 0.94},
        {-0.29, 1.23, -1.47, 0.33},
        {1.54, 0.11, -0.88, 1.77},
    };
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 7; j++) {
            net_config_weights.lay1_weights[i][j] = lay1_weights[i][j];
        }
    }
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 5; j++) {
            net_config_weights.lay2_weights[i][j] = lay2_weights[i][j];
        }
    }
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            net_config_weights.lay3_weights[i][j] = lay3_weights[i][j];
        }
    }
    net_config_layer_weights[0] = (void*)net_config_weights.lay0_weights;
    net_config_layer_weights[1] = (void*)net_config_weights.lay1_weights;
    net_config_layer_weights[2] = (void*)net_config_weights.lay2_weights;
    net_config_layer_weights[3] = (void*)net_config_weights.lay3_weights;
}

    // PREVIOUSLY USED WEIGHTS
    // float lay1_weights[5][7] = 
    // {
    // {0.12, -1.36, 0.78, -0.44, 1.87, 0.55, -1.98},
    // {-0.31, 1.66, -1.09, 0.92, 1.45, -0.67, 1.02},
    // {0.75, -0.89, 1.03, -1.45, 1.12, -0.58, 1.72},
    // {-1.91, 1.25, 0.46, 1.88, -0.43, -1.14, 0.99},
    // {1.39, -0.57, -1.66, 0.31, 0.98, 1.01, -0.76}
    // };
    // float lay4_weights[5][3] =  {
    // {1.24, -1.57, 0.89},
    // {-0.43, 1.91, -1.04},
    // {0.12, 1.39, -1.76},
    // {-1.32, 0.98, -0.47},
    // {1.05, -0.19, 1.72}
    // };
    // SOME OLD CODE
    // for (int i = 0; i < 7; i++) {
    //     for (int j = 0; j < 1; j++) {
    //         net_config_weights.lay0_weights[i][j] = lay0_weights[i][j];
    //     }
    // }
    // for (int i = 0; i < 5; i++) {
    //     for (int j = 0; j < 1000; j++) {
    //         net_config_weights.lay1_weights[i][j] = (float)((rand() % 401) - 200) / 100;//lay1_weights[i][j];
    //     }
    // }
    // for (int i = 0; i < 5; i++) {
    //     for (int j = 0; j < 3; j++) {
    //         net_config_weights.lay4_weights[i][j] = lay4_weights[i][j];
    //     }
    // }
    //net_config_layer_weights[4] = (void*)net_config_weights.lay4_weights;


// PREVIOUSLY USED DEFINITIONS
// #define NET_NUM_LAYERS 5
// #define NET_NUM_NEURONS ((int[]){7,5,4,3,5})
// struct {
//     float lay0_weights[7][1];
//     float lay1_weights[5][7];
//     float lay2_weights[4][5];
//     float lay3_weights[3][4];
//     float lay4_weights[5][3];
// } net_config_weights;

//#define NET_NUM_NEURONS ((int[]){1000,5,4,3})
// struct {
    // float lay0_weights[1000][1];
    // float lay1_weights[5][1000];
//     float lay2_weights[4][5];
//     float lay3_weights[3][4];
// } net_config_weights;

